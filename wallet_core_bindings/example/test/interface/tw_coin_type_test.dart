import 'package:flutter_test/flutter_test.dart';
import 'package:wallet_core_bindings/wallet_core_bindings.dart';

import '../utils.dart';

void main() {
  initTest();

  group(TWCoinType, () {
    test('TWPurpose', () {
      expect(
        TWPurpose.BIP84,
        TWCoinType.Bitcoin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.BitcoinCash.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Binance.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Cosmos.purpose,
      );
      expect(
        TWPurpose.BIP84,
        TWCoinType.DigiByte.purpose,
      );
      expect(
        TWPurpose.BIP84,
        TWCoinType.Litecoin.purpose,
      );
      expect(
        TWPurpose.BIP84,
        TWCoinType.Groestlcoin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.IoTeX.purpose,
      );
      expect(
        TWPurpose.BIP84,
        TWCoinType.Viacoin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Qtum.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Zilliqa.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Terra.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Monacoin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.BandChain.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Bluzelle.purpose,
      );
      expect(
        TWPurpose.BIP1852,
        TWCoinType.Cardano.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.MultiversX.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Oasis.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.THORChain.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.CryptoOrg.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Osmosis.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.ECash.purpose,
      );

      expect(
        TWPurpose.BIP44,
        TWCoinType.Aion.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Callisto.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Dash.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Decred.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Dogecoin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.EOS.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Ethereum.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.EthereumClassic.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.GoChain.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.ICON.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Kin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.NULS.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Nano.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Nimiq.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Ontology.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.POANetwork.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.XRP.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Stellar.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Tezos.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Theta.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.ThunderCore.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Viction.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Tron.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.VeChain.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Wanchain.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Zcash.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Firo.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Zelcash.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Ravencoin.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Waves.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.NEO.purpose,
      );
      expect(
        TWPurpose.BIP44,
        TWCoinType.Nebl.purpose,
      );
    });

    test('TWHDVersion', () {
      expect(
        TWHDVersion.ZPUB,
        TWCoinType.Bitcoin.xpubVersion,
      );
      expect(
        TWHDVersion.ZPRV,
        TWCoinType.Bitcoin.xprvVersion,
      );

      expect(
        TWHDVersion.XPUB,
        TWCoinType.BitcoinCash.xpubVersion,
      );
      expect(
        TWHDVersion.XPRV,
        TWCoinType.BitcoinCash.xprvVersion,
      );

      expect(
        TWHDVersion.DPUB,
        TWCoinType.Decred.xpubVersion,
      );
      expect(
        TWHDVersion.DPRV,
        TWCoinType.Decred.xprvVersion,
      );

      expect(
        TWHDVersion.DGUB,
        TWCoinType.Dogecoin.xpubVersion,
      );
      expect(
        TWHDVersion.DGPV,
        TWCoinType.Dogecoin.xprvVersion,
      );
    });

    test('TWPublicKeyType', () {
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Bitcoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.BitcoinCash.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Binance.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Cosmos.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.DigiByte.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Litecoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Groestlcoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.IoTeX.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Viacoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Qtum.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Zilliqa.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Terra.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Monacoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Kava.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.BandChain.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Bluzelle.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519Cardano,
        TWCoinType.Cardano.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.MultiversX.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.Oasis.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.THORChain.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.CryptoOrg.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Osmosis.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.ECash.publicKeyType,
      );

      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.Aion.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.Callisto.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Dash.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Decred.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Dogecoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.EOS.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.Ethereum.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.EthereumClassic.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.GoChain.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.ICON.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.Kin.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.NULS.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519Blake2b,
        TWCoinType.Nano.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.Nimiq.publicKeyType,
      );
      expect(
        TWPublicKeyType.NIST256p1,
        TWCoinType.Ontology.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.POANetwork.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.XRP.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.Stellar.publicKeyType,
      );
      expect(
        TWPublicKeyType.ED25519,
        TWCoinType.Tezos.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.Theta.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.ThunderCore.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.Viction.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.Tron.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.VeChain.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1Extended,
        TWCoinType.Wanchain.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Zcash.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Firo.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Zelcash.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Ravencoin.publicKeyType,
      );
      expect(
        TWPublicKeyType.CURVE25519,
        TWCoinType.Waves.publicKeyType,
      );
      expect(
        TWPublicKeyType.NIST256p1,
        TWCoinType.NEO.publicKeyType,
      );
      expect(
        TWPublicKeyType.SECP256k1,
        TWCoinType.Nebl.publicKeyType,
      );
    });

    test('Validate address', () {
      expect(
        TWCoinType.Bitcoin.validate('12dNaXQtN5Asn2YFwT1cvciCrJa525fAe4'),
        true,
      );
      expect(
        TWCoinType.Bitcoin.validate(
            'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'),
        true,
      );
    });

    test('TWCoinTypeDerivationPath', () {
      final res = TWCoinType.Bitcoin.derivationPath;
      expect(res, "m/84'/0'/0'/0/0");
    });

    test('TWCoinTypeDerivationPathWithDerivation', () {
      final res = TWCoinType.Bitcoin.derivationPathWithDerivation(
          TWDerivation.BitcoinLegacy);
      expect(res, "m/44'/0'/0'/0/0");
    });

    test('TWCoinTypeDerivationPathWithDerivationSolana', () {
      final res = TWCoinType.Solana.derivationPathWithDerivation(
          TWDerivation.SolanaSolana);
      expect(res, "m/44'/501'/0'/0'");
    });

    test('TWCoinTypeDerivationPathPactus', () {
      final res = TWCoinType.Pactus.derivationPath;
      expect(res, "m/44'/21888'/3'/0'");
    });

    test('TWCoinTypeDerivationPathWithDerivationPactusMainnet', () {
      final res = TWCoinType.Pactus.derivationPathWithDerivation(
          TWDerivation.PactusMainnet);
      expect(res, "m/44'/21888'/3'/0'");
    });

    test('TWCoinTypeDerivationPathWithDerivationPactusTestnet', () {
      final res = TWCoinType.Pactus.derivationPathWithDerivation(
          TWDerivation.PactusTestnet);
      expect(res, "m/44'/21777'/3'/0'");
    });
  });
}
