import 'package:test/test.dart';
import 'package:wallet_core_bindings/wallet_core_bindings.dart';

void main() {
  group(TWCoinType, () {
    test('TWPurpose', () {
      expect(
        TWPurpose.TWPurposeBIP84,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeBitcoin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeBitcoinCash),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeBinance),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeCosmos),
      );
      expect(
        TWPurpose.TWPurposeBIP84,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeDigiByte),
      );
      expect(
        TWPurpose.TWPurposeBIP84,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeLitecoin),
      );
      expect(
        TWPurpose.TWPurposeBIP84,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeGroestlcoin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeIoTeX),
      );
      expect(
        TWPurpose.TWPurposeBIP84,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeViacoin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeQtum),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeZilliqa),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeTerra),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeMonacoin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeBandChain),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeBluzelle),
      );
      expect(
        TWPurpose.TWPurposeBIP1852,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeCardano),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeMultiversX),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeOasis),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeTHORChain),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeCryptoOrg),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeOsmosis),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeECash),
      );

      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeAion),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeCallisto),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeDash),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeDecred),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeDogecoin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeEOS),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeEthereum),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeEthereumClassic),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeGoChain),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeICON),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeKin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeNULS),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeNano),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeNimiq),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeOntology),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypePOANetwork),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeXRP),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeStellar),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeTezos),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeTheta),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeThunderCore),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeViction),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeTron),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeVeChain),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeWanchain),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeZcash),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeFiro),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeZelcash),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeRavencoin),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeWaves),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeNEO),
      );
      expect(
        TWPurpose.TWPurposeBIP44,
        TWCoinTypePurpose(TWCoinType.TWCoinTypeNebl),
      );
    });

    test('TWHDVersion', () {
      expect(
        TWHDVersion.TWHDVersionZPUB,
        TWCoinTypeXpubVersion(TWCoinType.TWCoinTypeBitcoin),
      );
      expect(
        TWHDVersion.TWHDVersionZPRV,
        TWCoinTypeXprvVersion(TWCoinType.TWCoinTypeBitcoin),
      );

      expect(
        TWHDVersion.TWHDVersionXPUB,
        TWCoinTypeXpubVersion(TWCoinType.TWCoinTypeBitcoinCash),
      );
      expect(
        TWHDVersion.TWHDVersionXPRV,
        TWCoinTypeXprvVersion(TWCoinType.TWCoinTypeBitcoinCash),
      );

      expect(
        TWHDVersion.TWHDVersionDPUB,
        TWCoinTypeXpubVersion(TWCoinType.TWCoinTypeDecred),
      );
      expect(
        TWHDVersion.TWHDVersionDPRV,
        TWCoinTypeXprvVersion(TWCoinType.TWCoinTypeDecred),
      );

      expect(
        TWHDVersion.TWHDVersionDGUB,
        TWCoinTypeXpubVersion(TWCoinType.TWCoinTypeDogecoin),
      );
      expect(
        TWHDVersion.TWHDVersionDGPV,
        TWCoinTypeXprvVersion(TWCoinType.TWCoinTypeDogecoin),
      );
    });

    test('TWPublicKeyType', () {
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeBitcoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeBitcoinCash),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeBinance),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeCosmos),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeDigiByte),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeLitecoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeGroestlcoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeIoTeX),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeViacoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeQtum),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeZilliqa),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeTerra),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeMonacoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeKava),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeBandChain),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeBluzelle),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519Cardano,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeCardano),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeMultiversX),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeOasis),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeTHORChain),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeCryptoOrg),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeOsmosis),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeECash),
      );

      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeAion),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeCallisto),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeDash),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeDecred),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeDogecoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeEOS),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeEthereum),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeEthereumClassic),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeGoChain),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeICON),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeKin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeNULS),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519Blake2b,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeNano),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeNimiq),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeNIST256p1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeOntology),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypePOANetwork),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeXRP),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeStellar),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeED25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeTezos),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeTheta),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeThunderCore),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeViction),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeTron),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeVeChain),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1Extended,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeWanchain),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeZcash),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeFiro),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeZelcash),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeRavencoin),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeCURVE25519,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeWaves),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeNIST256p1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeNEO),
      );
      expect(
        TWPublicKeyType.TWPublicKeyTypeSECP256k1,
        TWCoinTypePublicKeyType(TWCoinType.TWCoinTypeNebl),
      );
    });

    test('Validate address', () {
      expect(
        TWCoinTypeValidate(
            TWCoinType.TWCoinTypeBitcoin, '12dNaXQtN5Asn2YFwT1cvciCrJa525fAe4'),
        true,
      );
      expect(
        TWCoinTypeValidate(TWCoinType.TWCoinTypeBitcoin,
            'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'),
        true,
      );
    });

    test('TWCoinTypeDerivationPath', () {
      final res = TWCoinTypeDerivationPath(TWCoinType.TWCoinTypeBitcoin);
      expect(res, "m/84'/0'/0'/0/0");
    });

    test('TWCoinTypeDerivationPathWithDerivation', () {
      final res = TWCoinTypeDerivationPathWithDerivation(
          TWCoinType.TWCoinTypeBitcoin, TWDerivation.TWDerivationBitcoinLegacy);
      expect(res, "m/44'/0'/0'/0/0");
    });

    test('TWCoinTypeDerivationPathWithDerivation Solana', () {
      final res = TWCoinTypeDerivationPathWithDerivation(
          TWCoinType.TWCoinTypeSolana, TWDerivation.TWDerivationSolanaSolana);
      expect(res, "m/44'/501'/0'/0'");
    });
  });
}
